#!/usr/bin/env python3
from pathlib import Path
import os
import subprocess
import logging


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(Path(__file__).name)
BACKEND_ROOT_PATH = Path(__file__).resolve().parents[1]


def setup_env_vars():
    # Ensure the script runs inside a conda environment
    if "CONDA_PREFIX" not in os.environ:
        logger.error("Not inside a conda environment. Exiting...")
        return

    # Set the paths for activation and deactivation scripts
    env_dir = Path(os.environ["CONDA_PREFIX"])
    activate_dir = env_dir / "etc" / "conda" / "activate.d"
    deactivate_dir = env_dir / "etc" / "conda" / "deactivate.d"
    activate_dir.mkdir(parents=True, exist_ok=True)
    deactivate_dir.mkdir(parents=True, exist_ok=True)

    # Create activation script
    with open(activate_dir / "project_env_vars.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write(f"export ROOT_PATH={BACKEND_ROOT_PATH}\n")

    # Create deactivation script
    with open(deactivate_dir / "project_env_vars.sh", "w") as f:
        f.write("#!/bin/bash\n")
        f.write("unset ROOT_PATH\n")

    env_path = BACKEND_ROOT_PATH / ".env"
    env_data = [f"ROOT_PATH={BACKEND_ROOT_PATH}\n"]
    if env_path.exists():
        with open(env_path, "r") as f:
            prev_data = f.readlines()
        for line in prev_data:
            if not line.startswith("ROOT_PATH="):
                env_data.append(line)

    with open(env_path, "w") as f:
        for env in env_data:
            f.write(env)

    logger.info(
        "Environment variables set. Reactivate your conda environment to apply changes."
    )


def install_dependencies():
    """Installs dependencies using Poetry."""
    try:
        logger.info("Installing dependencies with Poetry...")
        os.chdir(BACKEND_ROOT_PATH)
        subprocess.run(["poetry", "install"], check=True)
        logger.info("Dependencies installed successfully.")
    except subprocess.CalledProcessError:
        logger.error("Error installing dependencies. Please check your Poetry setup.")


def main():
    setup_env_vars()
    install_dependencies()


if __name__ == "__main__":
    main()
